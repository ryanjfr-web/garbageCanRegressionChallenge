---
title: "Garbage Can Regression Challenge"
format:
  html: default
execute:
  echo: true
  eval: true
---

# Garbage Can Regression Challenge

**Choose R or Python and delete the other code chunk.**

## R Code

## Python Code

```{python}
#| echo: true
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import statsmodels.api as sm

# Data with known true relationships: Anxiety = Stress + 0.1 × Time
data = {
    'Stress': [0,0,0,1,1,1,2,2,2,8,8,8,12,12,12],
    'StressSurvey': [0,0,0,3,3,3,6,6,6,9,9,9,12,12,12],
    'Time': [0,1,1,1,1,1,2,2,2,2,2,2.1,2.2,2.2,2.2],
    'Anxiety': [0,0.1,0.1,1.1,1.1,1.1,2.2,2.2,2.2,8.2,8.2,8.21,12.22,12.22,12.22]
}

observDF = pd.DataFrame(data)
print("Dataset:")
print(observDF)
print("\nTrue relationship: Anxiety = Stress + 0.1 × Time")
print("True coefficients: β₀ = 0, β₁ = 1, β₂ = 0.1")
```

## 1. Bivariate Regression Analysis with StressSurvey

```{python}
#| echo: true
# Bivariate regression: Anxiety ~ StressSurvey
X_stress_survey = observDF[['StressSurvey']]
y = observDF['Anxiety']

# Using statsmodels for detailed output
X_with_const = sm.add_constant(X_stress_survey)
model_stress_survey = sm.OLS(y, X_with_const).fit()

print("BIVARIATE REGRESSION: Anxiety ~ StressSurvey")
print("=" * 50)
print(model_stress_survey.summary())
print(f"\nEstimated coefficients:")
print(f"Intercept (β₀): {model_stress_survey.params['const']:.4f}")
print(f"StressSurvey coefficient (β₁): {model_stress_survey.params['StressSurvey']:.4f}")
print(f"R-squared: {model_stress_survey.rsquared:.4f}")
print(f"\nComparison to true relationship:")
print(f"True β₀ = 0, Estimated β₀ = {model_stress_survey.params['const']:.4f}")
print(f"True β₁ = 1, Estimated β₁ = {model_stress_survey.params['StressSurvey']:.4f}")
```

## 2. Visualization of Bivariate Relationship (StressSurvey vs Anxiety)

```{python}
#| echo: true
# Scatter plot with regression line for StressSurvey vs Anxiety
plt.figure(figsize=(10, 6))
plt.scatter(observDF['StressSurvey'], observDF['Anxiety'], alpha=0.7, s=100)

# Add regression line
x_range = np.linspace(observDF['StressSurvey'].min(), observDF['StressSurvey'].max(), 100)
y_pred = model_stress_survey.params['const'] + model_stress_survey.params['StressSurvey'] * x_range
plt.plot(x_range, y_pred, 'r-', linewidth=2, label=f'Regression Line (R² = {model_stress_survey.rsquared:.3f})')

plt.xlabel('Stress Survey Score')
plt.ylabel('Anxiety Level')
plt.title('Bivariate Relationship: StressSurvey vs Anxiety')
plt.legend()
plt.grid(True, alpha=0.3)
plt.show()

print(f"Model fit statistics:")
print(f"R-squared: {model_stress_survey.rsquared:.4f}")
print(f"Adjusted R-squared: {model_stress_survey.rsquared_adj:.4f}")
print(f"F-statistic: {model_stress_survey.fvalue:.4f}")
print(f"P-value (F-statistic): {model_stress_survey.f_pvalue:.4f}")
```

## 3. Bivariate Regression Analysis with Time

```{python}
#| echo: true
# Bivariate regression: Anxiety ~ Time
X_time = observDF[['Time']]

# Using statsmodels for detailed output
X_time_const = sm.add_constant(X_time)
model_time = sm.OLS(y, X_time_const).fit()

print("BIVARIATE REGRESSION: Anxiety ~ Time")
print("=" * 50)
print(model_time.summary())
print(f"\nEstimated coefficients:")
print(f"Intercept (β₀): {model_time.params['const']:.4f}")
print(f"Time coefficient (β₂): {model_time.params['Time']:.4f}")
print(f"R-squared: {model_time.rsquared:.4f}")
print(f"\nComparison to true relationship:")
print(f"True β₀ = 0, Estimated β₀ = {model_time.params['const']:.4f}")
print(f"True β₂ = 0.1, Estimated β₂ = {model_time.params['Time']:.4f}")
```

## 4. Visualization of Bivariate Relationship (Time vs Anxiety)

```{python}
#| echo: true
# Scatter plot with regression line for Time vs Anxiety
plt.figure(figsize=(10, 6))
plt.scatter(observDF['Time'], observDF['Anxiety'], alpha=0.7, s=100, color='green')

# Add regression line
x_range_time = np.linspace(observDF['Time'].min(), observDF['Time'].max(), 100)
y_pred_time = model_time.params['const'] + model_time.params['Time'] * x_range_time
plt.plot(x_range_time, y_pred_time, 'r-', linewidth=2, label=f'Regression Line (R² = {model_time.rsquared:.3f})')

plt.xlabel('Time')
plt.ylabel('Anxiety Level')
plt.title('Bivariate Relationship: Time vs Anxiety')
plt.legend()
plt.grid(True, alpha=0.3)
plt.show()

print(f"Model fit statistics:")
print(f"R-squared: {model_time.rsquared:.4f}")
print(f"Adjusted R-squared: {model_time.rsquared_adj:.4f}")
print(f"F-statistic: {model_time.fvalue:.4f}")
print(f"P-value (F-statistic): {model_time.f_pvalue:.4f}")
```

## 5. Multiple Regression Analysis: Anxiety ~ StressSurvey + Time

```{python}
#| echo: true
# Multiple regression: Anxiety ~ StressSurvey + Time
X_multiple_survey = observDF[['StressSurvey', 'Time']]

# Using statsmodels for detailed output
X_multiple_survey_const = sm.add_constant(X_multiple_survey)
model_multiple_survey = sm.OLS(y, X_multiple_survey_const).fit()

print("MULTIPLE REGRESSION: Anxiety ~ StressSurvey + Time")
print("=" * 60)
print(model_multiple_survey.summary())
print(f"\nEstimated coefficients:")
print(f"Intercept (β₀): {model_multiple_survey.params['const']:.4f}")
print(f"StressSurvey coefficient (β₁): {model_multiple_survey.params['StressSurvey']:.4f}")
print(f"Time coefficient (β₂): {model_multiple_survey.params['Time']:.4f}")
print(f"R-squared: {model_multiple_survey.rsquared:.4f}")
print(f"Adjusted R-squared: {model_multiple_survey.rsquared_adj:.4f}")
print(f"\nComparison to true relationship:")
print(f"True β₀ = 0, Estimated β₀ = {model_multiple_survey.params['const']:.4f}")
print(f"True β₁ = 1, Estimated β₁ = {model_multiple_survey.params['StressSurvey']:.4f}")
print(f"True β₂ = 0.1, Estimated β₂ = {model_multiple_survey.params['Time']:.4f}")
```

## 6. Multiple Regression Analysis: Anxiety ~ Stress + Time

```{python}
#| echo: true
# Multiple regression: Anxiety ~ Stress + Time
X_multiple_stress = observDF[['Stress', 'Time']]

# Using statsmodels for detailed output
X_multiple_stress_const = sm.add_constant(X_multiple_stress)
model_multiple_stress = sm.OLS(y, X_multiple_stress_const).fit()

print("MULTIPLE REGRESSION: Anxiety ~ Stress + Time")
print("=" * 60)
print(model_multiple_stress.summary())
print(f"\nEstimated coefficients:")
print(f"Intercept (β₀): {model_multiple_stress.params['const']:.4f}")
print(f"Stress coefficient (β₁): {model_multiple_stress.params['Stress']:.4f}")
print(f"Time coefficient (β₂): {model_multiple_stress.params['Time']:.4f}")
print(f"R-squared: {model_multiple_stress.rsquared:.4f}")
print(f"Adjusted R-squared: {model_multiple_stress.rsquared_adj:.4f}")
print(f"\nComparison to true relationship:")
print(f"True β₀ = 0, Estimated β₀ = {model_multiple_stress.params['const']:.4f}")
print(f"True β₁ = 1, Estimated β₁ = {model_multiple_stress.params['Stress']:.4f}")
print(f"True β₂ = 0.1, Estimated β₂ = {model_multiple_stress.params['Time']:.4f}")
```

## 7. Model Comparison

```{python}
#| echo: true
# Model comparison
print("MODEL COMPARISON")
print("=" * 50)

models = {
    'Bivariate (StressSurvey)': model_stress_survey,
    'Bivariate (Time)': model_time,
    'Multiple (StressSurvey + Time)': model_multiple_survey,
    'Multiple (Stress + Time)': model_multiple_stress
}

comparison_data = []
for name, model in models.items():
    comparison_data.append({
        'Model': name,
        'R-squared': model.rsquared,
        'Adj R-squared': model.rsquared_adj,
        'F-statistic': model.fvalue,
        'P-value (F)': model.f_pvalue,
        'AIC': model.aic,
        'BIC': model.bic
    })

comparison_df = pd.DataFrame(comparison_data)
print(comparison_df.round(4))

print("\nStatistical Significance of Coefficients:")
print("-" * 50)
for name, model in models.items():
    print(f"\n{name}:")
    for param in model.params.index:
        if param != 'const':
            p_value = model.pvalues[param]
            significance = "***" if p_value < 0.001 else "**" if p_value < 0.01 else "*" if p_value < 0.05 else ""
            print(f"  {param}: p = {p_value:.4f} {significance}")
```

## 8. Summary Statistics

```{python}
#| echo: true
# Summary statistics for all variables
print("DESCRIPTIVE STATISTICS")
print("=" * 50)
print(observDF.describe())

print("\nCORRELATION MATRIX")
print("=" * 30)
print(observDF.corr().round(4))

# Correlation heatmap
plt.figure(figsize=(8, 6))
correlation_matrix = observDF.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, 
            square=True, fmt='.3f')
plt.title('Correlation Matrix')
plt.tight_layout()
plt.show()
```

## Your Analysis

Follow the challenge instructions from your course to complete your analysis.
