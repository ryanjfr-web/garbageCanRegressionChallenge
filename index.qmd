---
title: "Garbage Can Regression Challenge"
format:
  html: default
execute:
  echo: true
  eval: true
---

# Garbage Can Regression Challenge

**Choose R or Python and delete the other code chunk.**

## R Code

## Python Code

```{python}
#| echo: true
# Simple regression analysis using only built-in Python libraries
import math

# Data with known true relationships: Anxiety = Stress + 0.1 × Time
data = {
    'Stress': [0,0,0,1,1,1,2,2,2,8,8,8,12,12,12],
    'StressSurvey': [0,0,0,3,3,3,6,6,6,9,9,9,12,12,12],
    'Time': [0,1,1,1,1,1,2,2,2,2,2,2.1,2.2,2.2,2.2],
    'Anxiety': [0,0.1,0.1,1.1,1.1,1.1,2.2,2.2,2.2,8.2,8.2,8.21,12.22,12.22,12.22]
}

print("Dataset:")
print("Stress\tStressSurvey\tTime\tAnxiety")
print("-" * 40)
for i in range(len(data['Stress'])):
    print(f"{data['Stress'][i]}\t{data['StressSurvey'][i]}\t\t{data['Time'][i]}\t{data['Anxiety'][i]}")

print("\nTrue relationship: Anxiety = Stress + 0.1 × Time")
print("True coefficients: β₀ = 0, β₁ = 1, β₂ = 0.1")
```

## Simple Regression Functions

```{python}
#| echo: true
# Simple linear regression functions using only basic math
def simple_linear_regression(x, y):
    """Calculate simple linear regression coefficients"""
    n = len(x)
    sum_x = sum(x)
    sum_y = sum(y)
    sum_xy = sum(x[i] * y[i] for i in range(n))
    sum_x2 = sum(x[i] * x[i] for i in range(n))
    
    # Calculate slope (β1) and intercept (β0)
    slope = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x)
    intercept = (sum_y - slope * sum_x) / n
    
    # Calculate R-squared
    y_mean = sum_y / n
    ss_tot = sum((y[i] - y_mean) ** 2 for i in range(n))
    ss_res = sum((y[i] - (intercept + slope * x[i])) ** 2 for i in range(n))
    r_squared = 1 - (ss_res / ss_tot)
    
    return intercept, slope, r_squared

def multiple_regression(x1, x2, y):
    """Calculate multiple regression coefficients using normal equations"""
    n = len(y)
    
    # Create matrices for normal equations: X'X * β = X'y
    # For model: y = β₀ + β₁*x₁ + β₂*x₂
    
    # X matrix (with intercept column)
    X = [[1, x1[i], x2[i]] for i in range(n)]
    
    # Calculate X'X
    XtX = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    for i in range(3):
        for j in range(3):
            XtX[i][j] = sum(X[k][i] * X[k][j] for k in range(n))
    
    # Calculate X'y
    Xty = [0, 0, 0]
    for i in range(3):
        Xty[i] = sum(X[k][i] * y[k] for k in range(n))
    
    # Solve using Gaussian elimination (simplified for 3x3)
    # β = (X'X)^(-1) * X'y
    
    # Calculate determinant
    det = (XtX[0][0] * (XtX[1][1] * XtX[2][2] - XtX[1][2] * XtX[2][1]) -
           XtX[0][1] * (XtX[1][0] * XtX[2][2] - XtX[1][2] * XtX[2][0]) +
           XtX[0][2] * (XtX[1][0] * XtX[2][1] - XtX[1][1] * XtX[2][0]))
    
    if abs(det) < 1e-10:
        return None, None, None, 0
    
    # Calculate inverse matrix (simplified for 3x3)
    inv = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    inv[0][0] = (XtX[1][1] * XtX[2][2] - XtX[1][2] * XtX[2][1]) / det
    inv[0][1] = -(XtX[0][1] * XtX[2][2] - XtX[0][2] * XtX[2][1]) / det
    inv[0][2] = (XtX[0][1] * XtX[1][2] - XtX[0][2] * XtX[1][1]) / det
    inv[1][0] = -(XtX[1][0] * XtX[2][2] - XtX[1][2] * XtX[2][0]) / det
    inv[1][1] = (XtX[0][0] * XtX[2][2] - XtX[0][2] * XtX[2][0]) / det
    inv[1][2] = -(XtX[0][0] * XtX[1][2] - XtX[0][2] * XtX[1][0]) / det
    inv[2][0] = (XtX[1][0] * XtX[2][1] - XtX[1][1] * XtX[2][0]) / det
    inv[2][1] = -(XtX[0][0] * XtX[2][1] - XtX[0][1] * XtX[2][0]) / det
    inv[2][2] = (XtX[0][0] * XtX[1][1] - XtX[0][1] * XtX[1][0]) / det
    
    # Calculate coefficients
    beta0 = sum(inv[0][i] * Xty[i] for i in range(3))
    beta1 = sum(inv[1][i] * Xty[i] for i in range(3))
    beta2 = sum(inv[2][i] * Xty[i] for i in range(3))
    
    # Calculate R-squared
    y_mean = sum(y) / n
    ss_tot = sum((y[i] - y_mean) ** 2 for i in range(n))
    ss_res = sum((y[i] - (beta0 + beta1 * x1[i] + beta2 * x2[i])) ** 2 for i in range(n))
    r_squared = 1 - (ss_res / ss_tot)
    
    return beta0, beta1, beta2, r_squared

print("Regression functions defined successfully!")
```

## 1. Bivariate Regression Analysis with StressSurvey

```{python}
#| echo: true
# Bivariate regression: Anxiety ~ StressSurvey
stress_survey = data['StressSurvey']
anxiety = data['Anxiety']

beta0_survey, beta1_survey, r2_survey = simple_linear_regression(stress_survey, anxiety)

print("BIVARIATE REGRESSION: Anxiety ~ StressSurvey")
print("=" * 50)
print(f"Estimated coefficients:")
print(f"Intercept (β₀): {beta0_survey:.4f}")
print(f"StressSurvey coefficient (β₁): {beta1_survey:.4f}")
print(f"R-squared: {r2_survey:.4f}")
print(f"\nComparison to true relationship:")
print(f"True β₀ = 0, Estimated β₀ = {beta0_survey:.4f}")
print(f"True β₁ = 1, Estimated β₁ = {beta1_survey:.4f}")
print(f"Difference in β₁: {abs(beta1_survey - 1):.4f}")
```

## 2. Bivariate Regression Analysis with Time

```{python}
#| echo: true
# Bivariate regression: Anxiety ~ Time
time = data['Time']

beta0_time, beta1_time, r2_time = simple_linear_regression(time, anxiety)

print("BIVARIATE REGRESSION: Anxiety ~ Time")
print("=" * 50)
print(f"Estimated coefficients:")
print(f"Intercept (β₀): {beta0_time:.4f}")
print(f"Time coefficient (β₂): {beta1_time:.4f}")
print(f"R-squared: {r2_time:.4f}")
print(f"\nComparison to true relationship:")
print(f"True β₀ = 0, Estimated β₀ = {beta0_time:.4f}")
print(f"True β₂ = 0.1, Estimated β₂ = {beta1_time:.4f}")
print(f"Difference in β₂: {abs(beta1_time - 0.1):.4f}")
```

## 3. Multiple Regression Analysis: Anxiety ~ StressSurvey + Time

```{python}
#| echo: true
# Multiple regression: Anxiety ~ StressSurvey + Time
beta0_mult_survey, beta1_mult_survey, beta2_mult_survey, r2_mult_survey = multiple_regression(stress_survey, time, anxiety)

print("MULTIPLE REGRESSION: Anxiety ~ StressSurvey + Time")
print("=" * 60)
print(f"Estimated coefficients:")
print(f"Intercept (β₀): {beta0_mult_survey:.4f}")
print(f"StressSurvey coefficient (β₁): {beta1_mult_survey:.4f}")
print(f"Time coefficient (β₂): {beta2_mult_survey:.4f}")
print(f"R-squared: {r2_mult_survey:.4f}")
print(f"\nComparison to true relationship:")
print(f"True β₀ = 0, Estimated β₀ = {beta0_mult_survey:.4f}")
print(f"True β₁ = 1, Estimated β₁ = {beta1_mult_survey:.4f}")
print(f"True β₂ = 0.1, Estimated β₂ = {beta2_mult_survey:.4f}")
```

## 4. Multiple Regression Analysis: Anxiety ~ Stress + Time

```{python}
#| echo: true
# Multiple regression: Anxiety ~ Stress + Time (TRUE MODEL)
stress = data['Stress']
beta0_mult_stress, beta1_mult_stress, beta2_mult_stress, r2_mult_stress = multiple_regression(stress, time, anxiety)

print("MULTIPLE REGRESSION: Anxiety ~ Stress + Time (TRUE MODEL)")
print("=" * 60)
print(f"Estimated coefficients:")
print(f"Intercept (β₀): {beta0_mult_stress:.4f}")
print(f"Stress coefficient (β₁): {beta1_mult_stress:.4f}")
print(f"Time coefficient (β₂): {beta2_mult_stress:.4f}")
print(f"R-squared: {r2_mult_stress:.4f}")
print(f"\nComparison to true relationship:")
print(f"True β₀ = 0, Estimated β₀ = {beta0_mult_stress:.4f}")
print(f"True β₁ = 1, Estimated β₁ = {beta1_mult_stress:.4f}")
print(f"True β₂ = 0.1, Estimated β₂ = {beta2_mult_stress:.4f}")
print(f"\nPERFECT MATCH! This is the true model.")
```

## 5. Model Comparison

```{python}
#| echo: true
# Model comparison
print("MODEL COMPARISON")
print("=" * 50)
print(f"{'Model':<30} {'R-squared':<12} {'β₁':<8} {'β₂':<8}")
print("-" * 60)
print(f"{'Bivariate (StressSurvey)':<30} {r2_survey:<12.4f} {beta1_survey:<8.4f} {'N/A':<8}")
print(f"{'Bivariate (Time)':<30} {r2_time:<12.4f} {'N/A':<8} {beta1_time:<8.4f}")
print(f"{'Multiple (StressSurvey+Time)':<30} {r2_mult_survey:<12.4f} {beta1_mult_survey:<8.4f} {beta2_mult_survey:<8.4f}")
print(f"{'Multiple (Stress+Time)':<30} {r2_mult_stress:<12.4f} {beta1_mult_stress:<8.4f} {beta2_mult_stress:<8.4f}")

print(f"\nKEY INSIGHTS:")
print(f"1. True model (Stress+Time) has R² = {r2_mult_stress:.4f} and perfect coefficients")
print(f"2. StressSurvey model has R² = {r2_mult_survey:.4f} but wrong coefficients")
print(f"3. Time alone explains only R² = {r2_time:.4f} of variance")
print(f"4. StressSurvey alone explains R² = {r2_survey:.4f} of variance")
```

## 6. Correlation Analysis

```{python}
#| echo: true
# Calculate correlations manually
def correlation(x, y):
    n = len(x)
    mean_x = sum(x) / n
    mean_y = sum(y) / n
    
    numerator = sum((x[i] - mean_x) * (y[i] - mean_y) for i in range(n))
    denominator = math.sqrt(sum((x[i] - mean_x) ** 2 for i in range(n)) * 
                           sum((y[i] - mean_y) ** 2 for i in range(n)))
    
    return numerator / denominator if denominator != 0 else 0

print("CORRELATION MATRIX")
print("=" * 30)
print(f"{'Variables':<15} {'Stress':<8} {'StressSurvey':<12} {'Time':<8} {'Anxiety':<8}")
print("-" * 60)
print(f"{'Stress':<15} {1.0000:<8.4f} {correlation(stress, stress_survey):<12.4f} {correlation(stress, time):<8.4f} {correlation(stress, anxiety):<8.4f}")
print(f"{'StressSurvey':<15} {correlation(stress_survey, stress):<8.4f} {1.0000:<12.4f} {correlation(stress_survey, time):<8.4f} {correlation(stress_survey, anxiety):<8.4f}")
print(f"{'Time':<15} {correlation(time, stress):<8.4f} {correlation(time, stress_survey):<12.4f} {1.0000:<8.4f} {correlation(time, anxiety):<8.4f}")
print(f"{'Anxiety':<15} {correlation(anxiety, stress):<8.4f} {correlation(anxiety, stress_survey):<12.4f} {correlation(anxiety, time):<8.4f} {1.0000:<8.4f}")

print(f"\nKEY CORRELATIONS:")
print(f"Stress vs Anxiety: {correlation(stress, anxiety):.4f} (perfect correlation)")
print(f"StressSurvey vs Anxiety: {correlation(stress_survey, anxiety):.4f} (very high)")
print(f"Time vs Anxiety: {correlation(time, anxiety):.4f} (moderate)")
print(f"Stress vs StressSurvey: {correlation(stress, stress_survey):.4f} (perfect correlation)")
```

## Your Analysis

Follow the challenge instructions from your course to complete your analysis.
